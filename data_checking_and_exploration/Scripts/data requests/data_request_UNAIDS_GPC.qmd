---
title: "read_msd"
author: "Bourke Betz"
format: html
editor: visual
params: 
  fiscal_year: 2023
  population: "KP"
---

```{r}
library(janitor)
library(gagglr)
library(tidyverse)

```

Identify the name of the latest OU x IM MER Structured Data Set

```{r}

filename <- glamr::return_latest(folderpath =  "../../Data/", pattern = "OU_IM_FY2")

```



Define country of interest

```{r}
gpc_country <- c("Angola", "Botswana", "Brazil", "Cameroon", "China", "Cote d'Ivoire", "Democratic Republic of the Congo", "DRC",
"Eswatini", "Ethiopia", "Ghana", "India", "Indonesia", "Iran", "Kenya", "Lesotho", "Malawi", "Mexico",
"Mozambique", "Myanmar", "Burma","Namibia", "Nigeria", "Pakistan", "South Africa", "Uganda", "Ukraine", "Tanzania","Zambia", "Zimbabwe")

```

Read, filter and transform

```{r}
df <- gophr::read_psd(filename) |>  
  filter(str_detect(standardizeddisaggregate, "KeyPop|Total") == TRUE,
         fiscal_year == params$fiscal_year,
         indicator %in% c("KP_PREV", "TX_CURR"),
         standardizeddisaggregate != "KeyPop/Status",
         country %in% gpc_country) |>
  # mutate(indicator = 
  #          recode(indicator, "TX_PVLS" = paste0(indicator,"_",numeratordenom)),
  #                 funding_agency = recode(funding_agency, "HHS/CDC" = "CDC")) |>
  filter(indicator %in% c("KP_PREV", "TX_CURR")) |> 
  mutate(cumulative = coalesce(cumulative, 0),
         targets = coalesce(targets, 0),
         fy = fiscal_year,
         partner = prime_partner_name,
         disagg = str_extract(standardizeddisaggregate, "Total|KeyPop"),
         disagg = recode(disagg, "KeyPop" = "KP"),
         tx_ml_reason = case_when(indicator=="TX_ML" ~ 
              str_extract(otherdisaggregate, "(?<=Outcome\\s-\\s).+")),
              keypop = str_extract(otherdisaggregate,
                      "FSW|MSM|TG|PWID|People\\sin\\sprisons"),
         keypop = recode(keypop, "People in prisons" = "Prisoners")) |>
  select(operatingunit, country, partner, mech_code, mech_name, indicator, funding_agency, numeratordenom, disagg, standardizeddisaggregate, tx_ml_reason, keypop, fy, targets, cumulative) |> 
  filter(disagg==params$population)
```

```{r}
gpc_coverage <- df |> 
  select(country, fy,  keypop, indicator, cumulative) |> 
  mutate(cumulative = coalesce(cumulative, 0),
         cumulative = if_else(cumulative>0,1,0)) |>
  group_by(country, fy,  keypop, indicator) |>
  summarise(cumulative = max(cumulative),  .groups = 'drop') |>
  pivot_wider(names_from = indicator, values_from = cumulative) |>
  mutate(KP_PREV  = coalesce(KP_PREV , 0),
         TX_CURR  = coalesce(TX_CURR , 0)) |>
  print()

# fileout2 <- paste0("../../Dataout/FY", params$fiscal_year, "GPC_country_PEPFAR_coverage.csv")
 
# write_csv(gpc_coverage, fileout2)


```

```{r}
gpc_indicator_results <- df |> 
  select(country, fy,  keypop, indicator, cumulative) |> 
  mutate(cumulative = coalesce(cumulative, 0)) |>
  group_by(country, fy,  keypop, indicator) |>
  summarise(cumulative = sum(cumulative),  .groups = 'drop') |>
  pivot_wider(names_from = indicator, values_from = cumulative) |>
  mutate(KP_PREV  = coalesce(KP_PREV , 0),
         TX_CURR  = coalesce(TX_CURR , 0)) |>
  print(n=110)


```

compare output to past

```{r}
past_filename <- return_latest(folderpath = "../../Dataout", pattern = "GPC_country_PEPFAR_indicator")

past <- read_csv(past_filename) %>% mutate(fy=as.integer(fy))

waldo::compare(past, gpc_indicator_results)
identical(past, gpc_indicator_results)
compare::compare(past, gpc_indicator_results)
all.equal(past, gpc_indicator_results)
```

output new file

```{r}
msd_date <- str_extract(filename, "[0-9]{8}")

fileout <- paste0("../../Dataout/FY", params$fiscal_year, "_GPC_country_PEPFAR_indicator_data_", msd_date, ".csv")

write_csv(gpc_indicator_results, fileout)
```
